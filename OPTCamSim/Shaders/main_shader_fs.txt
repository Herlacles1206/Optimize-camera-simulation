#version 420 core
out vec4 FragColor;

in vec3 FragPos;  
in vec3 Normal; 
in vec3 objectColor;
in vec2 texCoord;
in float TexInd;
in vec4 FragPosLightSpace;

uniform vec3 lightPos; 
uniform vec3 lightColor;
uniform vec3 viewPos;

uniform sampler2D texture0;
uniform sampler2D texture1;
uniform sampler2D shadowMap; //shadow
float ShadowCalculation(vec4 fragPosLightSpace, vec3 normal, vec3 lightDir)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // check whether current frag pos is in shadow
    //float bias =  0.00005;
    float bias = max(0.0005 * (1.0 - dot(normal, lightDir)), 0.00005);  
    //float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    if(projCoords.z > 1.0)
        shadow = 0.0;
    return shadow;
}
void main()
{    
   // ambient
    float ambientStrength = 0.01;
    vec3 ambient = ambientStrength * lightColor;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
            
    // specular
    float specularStrength = 0.1;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;  
    // calculate shadow
    float shadow = 0.25* ShadowCalculation(FragPosLightSpace, norm, lightDir);     
	
	vec3 result = (ambient + (1.0 - shadow) * (diffuse + specular));

	if( norm.z<-1e-4)
	{
		/*Second light source below*/
		vec3 lowerLight = vec3(-500,500,-500);
		// diffuse 
		vec3 lightDir2 = normalize(lowerLight - FragPos);
		float diff2 = max(dot(norm, lightDir2), 0.0);
		vec3 diffuse2 = diff2 * lightColor;
    
		result =(ambient + (1.0 - shadow) * (diffuse+ diffuse2 + specular));
	}
	
    if(TexInd==1) // part name - no shadows
        FragColor = texture(texture0, texCoord)* vec4( (ambient + diffuse + specular),1);
    else if(TexInd==2) // Panel with the texture
        FragColor = texture(texture1, texCoord)* vec4(result,1);
    else // panel without texture
        FragColor = vec4(result  * objectColor,1);

    //FragColor = vec4(FragPosLightSpace.xyz,1);
}
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace OPTCAMSim
{
    public partial class FormSettings : Form
    {
        public FormSettings()
        {
            InitializeComponent();
        }

        private void FormSettings_Load(object sender, EventArgs e)
        {
            nudPanelSplit.Value = Properties.Settings.Default.PanelSplitting;
            nudStepLength.Value = (decimal)Properties.Settings.Default.StepLength;
            nudRounding.Value = Properties.Settings.Default.ToolRounding;
            nudToolFringes.Value = Properties.Settings.Default.ToolFringes;
            nudCutFaces.Value = Properties.Settings.Default.CutFaces;
            nudStepAngle.Value = (decimal)Properties.Settings.Default.StepAngle;
            chkMergeCuts.Checked = Properties.Settings.Default.MergeCuts;
            chkMergeHoles.Checked = Properties.Settings.Default.MergeHoles;
            nudFPS.Value = Properties.Settings.Default.FPS;
            nudSmallSteps.Value = (decimal)Properties.Settings.Default.SmallSteps;
            chkBoxShowGcode.Checked = Properties.Settings.Default.ShowGCode;
            chkUsePanel.Checked = Properties.Settings.Default.UsePanelSizes;
            nudPanelX.Value = (decimal)Properties.Settings.Default.PanelX;
            nudPanelY.Value = (decimal)Properties.Settings.Default.PanelY;
            nudPanelZ.Value = (decimal)Properties.Settings.Default.PanelZ;
            gbPanelSizes.Enabled = chkUsePanel.Checked;
            chkPanelMode.Checked = Properties.Settings.Default.PanelMode;
            tbPanelsData.Text = Properties.Settings.Default.PanelsDataPath;
            gbPanelsData.Enabled = chkPanelMode.Checked;
            chkUseAdv3d.Checked = Properties.Settings.Default.UseAdvanced3D > 0;
            if (Properties.Settings.Default.GcodeSyn == null || Properties.Settings.Default.GcodeSyn.Count == 0)
            {
                Properties.Settings.Default.GcodeSyn = new List<string> { "G" };                
            }            
            if (Properties.Settings.Default.TcodeSyn == null || Properties.Settings.Default.TcodeSyn.Count == 0)
            {
                Properties.Settings.Default.TcodeSyn = new List<string> { "T" };
            }
            foreach (string x in Properties.Settings.Default.GcodeSyn)
                dvGsyn.Rows.Add(x);
            foreach (string x in Properties.Settings.Default.TcodeSyn)
                dvTsyn.Rows.Add(x);
            if (!string.IsNullOrWhiteSpace(Properties.Settings.Default.SpecialCodes))
            {
                Dictionary<string, int> codes = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, int>>(Properties.Settings.Default.SpecialCodes);
                foreach(KeyValuePair<string,int> c in codes)
                    dvMsyn.Rows.Add(c.Key,c.Value==1?"Stop": "Pause");
            }

            //Set Tooltips
            this.toolTip1.SetToolTip(this.ttSplit, @"Split panel into small pieces to boost the cutting simulation process.
The value should be higher for large sim files with a lot of steps.");
            this.toolTip1.SetToolTip(this.ttStepLen, @"Split tool steps into smaller steps to have more smooth tool movement animation and circular cuts.
Directly connected with the tool speed.");
            this.toolTip1.SetToolTip(this.ttAngle, @"Roughen the circular steps to boost the simulation.
The curve will consist of segments with the given angle.");
            this.toolTip1.SetToolTip(this.ttToolFringes, @"The number of segments (meridians) of horizontal cross-section of the tool. 
Defines, how round is the tool.");
            this.toolTip1.SetToolTip(this.ttRound, @"The number of segments (parallels) of vertical cross-section of the tool roundings. 
Defines, how round is the tool rounding. 
Valid for all the tools with roundings");
            this.toolTip1.SetToolTip(this.ttMaxCutFaces, @"The maximum number of faces (fringes) in the object, generated by cutting. 
Defines the quality of resulting cuts in the panel.");
            this.toolTip1.SetToolTip(this.ttFPS, @"Frames per second - main form update rate during the simulation");
            this.toolTip1.SetToolTip(this.ttMergeHoles, @"Check to merge panel after cuttings - may remove some cutting inaccuracies");
            this.toolTip1.SetToolTip(this.ttMergeCuts, @"Check to merge cut-out pieces - may remove some cutting inaccuracies");
            this.toolTip1.SetToolTip(this.ttSmallStep, @"Combine very small linear tool steps into larger steps of minimal length.
Allow to boost the simulation with the small drop of accuracy.");

            this.toolTip1.SetToolTip(this.chkPanelMode, "Allows to load multiple nested panles data from JSON file");

            this.toolTip1.SetToolTip(this.ttUseAdv3d, "Higher quality of 3D-cuts, but slowdown of the simulation");
        }

        private void bnOK_Click(object sender, EventArgs e)
        {
            if(chkPanelMode.Checked && tbPanelsData.Text.Length ==0)
            {
                MessageBox.Show("Specify the panels data path!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                tbPanelsData.Focus();
                return;
            }
            Properties.Settings.Default.PanelSplitting = (int) nudPanelSplit.Value;
            Properties.Settings.Default.StepLength =(double) nudStepLength.Value;
            Properties.Settings.Default.ToolRounding = (int)nudRounding.Value;
            Properties.Settings.Default.ToolFringes = (int)nudToolFringes.Value;
            Properties.Settings.Default.CutFaces = (int)nudCutFaces.Value;
            Properties.Settings.Default.StepAngle = (double)nudStepAngle.Value;
            Properties.Settings.Default.MergeCuts = chkMergeCuts.Checked;
            Properties.Settings.Default.MergeHoles = chkMergeHoles.Checked;
            Properties.Settings.Default.FPS = (int)nudFPS.Value;
            Properties.Settings.Default.SmallSteps = (double)nudSmallSteps.Value;
            Properties.Settings.Default.ShowGCode = chkBoxShowGcode.Checked;
            Properties.Settings.Default.UsePanelSizes = chkUsePanel.Checked;
            Properties.Settings.Default.PanelX = (double)nudPanelX.Value;
            Properties.Settings.Default.PanelY = (double)nudPanelY.Value;
            Properties.Settings.Default.PanelZ = (double)nudPanelZ.Value;
            Properties.Settings.Default.PanelMode = chkPanelMode.Checked;
            Properties.Settings.Default.PanelsDataPath = tbPanelsData.Text;
            Properties.Settings.Default.UseAdvanced3D = chkUseAdv3d.Checked?1:0;
            Properties.Settings.Default.GcodeSyn.Clear();
            foreach (DataGridViewRow dr in dvGsyn.Rows)
                if(dr.Cells[0].Value!=null && dr.Cells[0].Value.ToString().Length>0)
                    Properties.Settings.Default.GcodeSyn.Add(dr.Cells[0].Value.ToString());
            Properties.Settings.Default.TcodeSyn.Clear();
            foreach (DataGridViewRow dr in dvTsyn.Rows)
                if (dr.Cells[0].Value != null && dr.Cells[0].Value.ToString().Length>0)
                    Properties.Settings.Default.TcodeSyn.Add(dr.Cells[0].Value.ToString());

            Properties.Settings.Default.SpecialCodes="";
            Dictionary<string, int> codes = new Dictionary<string, int> { };
            foreach (DataGridViewRow dr in dvMsyn.Rows)
            {
                if (dr.Cells[0].Value != null && dr.Cells[0].Value.ToString().Length > 0)
                {
                    codes.Add(dr.Cells[0].Value.ToString(), dr.Cells[1].Value.ToString() == "Stop" ? 1 : 2);
                }
            }
            Properties.Settings.Default.SpecialCodes = Newtonsoft.Json.JsonConvert.SerializeObject(codes);
            if (Properties.Settings.Default.GcodeSyn.Count == 0)
                Properties.Settings.Default.GcodeSyn.Add("G");
            if (Properties.Settings.Default.TcodeSyn.Count == 0)
                Properties.Settings.Default.TcodeSyn.Add("T");
            Properties.Settings.Default.Save();
            this.DialogResult = DialogResult.OK;
            this.Close();
        }

        private void chkUsePanel_CheckedChanged(object sender, EventArgs e)
        {
            gbPanelSizes.Enabled = !gbPanelSizes.Enabled;             
        }

        private void bnSelectFolder_Click(object sender, EventArgs e)
        {
            using(FolderBrowserDialog fd = new FolderBrowserDialog() { ShowNewFolderButton = false })
            {
                if(fd.ShowDialog()==DialogResult.OK)
                {
                    tbPanelsData.Text = fd.SelectedPath;
                }
            }
        }

        private void chkPanelMode_CheckedChanged(object sender, EventArgs e)
        {
            gbPanelsData.Enabled = !gbPanelsData.Enabled;
        }
    }
}
